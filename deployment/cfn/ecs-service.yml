AWSTemplateFormatVersion: '2010-09-09'
Description: This stack creates green color services task definition and service
Parameters:
  Environment:
    Type: String
    Description: Environment Name (DEV)
    AllowedValues: [ 'DEV' ]
  Platform:
    Type: String
    Default: 'GS'
    Description: Platform Name
  AppName:
    Type: String
    Default: 'APP'
    Description: Application Name
  RoleStackName:
    Type: String
    Description: Name of the stack which is used to create Roles
  EcsClusterStackName:
    Type: String
    Description: Name of the stack which is used to create ECS cluster
  VpcStackName:
    Type: String
    Description: Name of the stack which is used to create VPC and Subnets
  SecurityGroupStackName:
    Type: String
    Description: Name of the stack used to create security group
  LoadBalancerStackName:
    Type: String
    Description: Name of the stack used to create load balancer
  ImageVersion:
    Type: String
    Description: Version of the docker image
Resources:
  # Cloud watch log group to which container send logs
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/ECS/${Environment}/${Platform}/${AppName}'
      RetentionInDays: 1

  # The task definition. This is a simple metadata description of what container to run,
  # and what resource requirements it has.
  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub '${Environment}-${Platform}-${AppName}-TD-01'
      Cpu: 512
      Memory: 1024
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn:
        Fn::ImportValue: !Join [ ':', [ !Ref 'RoleStackName', 'ECSTaskExecutionRoleArn' ] ]
      TaskRoleArn:
        Fn::ImportValue: !Join [ ':', [ !Ref 'RoleStackName', 'ECSTaskRoleArn' ] ]
      ContainerDefinitions:
        - Name: !Sub '${Environment}-${Platform}-DB-CONTAINER'
          Image: postgres
          Essential: true
          PortMappings:
            - ContainerPort: 5432
          Environment:
            - Name: POSTGRES_DB
              Value: myorg
            - Name: POSTGRES_USER
              Value: foo
            - Name: POSTGRES_PASSWORD
              Value: example123
        - Name: !Sub '${Environment}-${Platform}-ACTIVEMQ-CONTAINER'
          Image: symptoma/activemq:latest
          Essential: true
          PortMappings:
            - ContainerPort: 61616
            - ContainerPort: 8161
        - Name: !Sub '${Environment}-${Platform}-${AppName}-CONTAINER'
          Image: !Sub 'kamaraj/spring-boot-graceful-shutdown:${ImageVersion}'
          Essential: true
          DependsOn:
            - ContainerName: !Sub '${Environment}-${Platform}-DB-CONTAINER'
              Condition: START
            - ContainerName: !Sub '${Environment}-${Platform}-ACTIVEMQ-CONTAINER'
              Condition: START
          PortMappings:
            - ContainerPort: 8080
            - ContainerPort: 8081
          StopTimeout: 60
          Environment:
            - Name: JAVA_OPTS
              Value: -XshowSettings:vm -XX:MetaspaceSize=64M -XX:MaxMetaspaceSize=128M -XX:+UseG1GC -XX:+ExitOnOutOfMemoryError -XX:+UseStringDeduplication -XX:G1PeriodicGCSystemLoadThreshold=0.5 -XX:G1PeriodicGCInterval=210000 -XX:-G1PeriodicGCInvokesConcurrent -Dspring.config.location=classpath:/application.yml -Dspring.jmx.enabled=false -Duser.timezone=UTC -Duser.country=US -Duser.language=en
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs

  # Service is a resource which allows running multiple copies of a type of task, and gather their logs and metrics,
  # as well as monitor the number of running tasks and replace any that have crashed
  ECSService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub '${Environment}-${Platform}-${AppName}-SERVICE-01'
      Cluster:
        Fn::ImportValue: !Join [ ':', [ !Ref 'EcsClusterStackName', 'EcsClusterName' ] ]
      LaunchType: FARGATE
      PlatformVersion: 1.4.0
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: 1
      TaskDefinition: !Ref ECSTaskDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Fn::ImportValue: !Join [ ':', [ !Ref 'SecurityGroupStackName', 'ContainerSecurityGroupId' ] ]
          Subnets:
            - Fn::ImportValue: !Join [ ':', [ !Ref 'VpcStackName', 'PrivateSubnetOne' ] ]
            - Fn::ImportValue: !Join [ ':', [ !Ref 'VpcStackName', 'PrivateSubnetTwo' ] ]
      LoadBalancers:
        - ContainerName: !Sub '${Environment}-${Platform}-${AppName}-CONTAINER'
          ContainerPort: 8080
          TargetGroupArn:
            Fn::ImportValue: !Join [ ':', [ !Ref 'LoadBalancerStackName', 'MetadataTargetGroupArn' ] ]
Outputs:
  ClusterName:
    Description: Name of the ECS cluster
    Value:
      Fn::ImportValue: !Join [ ':', [ !Ref 'EcsClusterStackName', 'EcsClusterName' ] ]
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'ClusterName' ] ]
  ServiceName:
    Description: Name of the ECS Service
    Value: !GetAtt 'ECSService.Name'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'ServiceName' ] ]
